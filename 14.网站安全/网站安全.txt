------------------------------------

1--》http状态码
------------------------------------
100 - Continue 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）
101 - Switching Protocols 服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）
200 OK请求被成功处理，服务器会根据不同的请求方法返回结果：
202 - Accepted 已经接受请求，但处理尚未完成。
301 永久性重定向
302 临时性重定向 如果，用户把一个URI收藏为书签，302响应是不会像301那样去更新书签。
400 表示该请求报文中存在语法错误
401 未授权，访问被拒绝，客户试图未经授权访问受密码保护的页面。(当前请求需要用户验证。)
403 服务器拒绝，未获得文件系统的访问权限，访问权限出现某些问题，从未授权的发送源IP地址试图访问等情况都可能发生403响应
404 该状态码表明服务器上无法找到指定的资源
500 服务器内部错误
501 服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。
503 该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上需要的时间，最好写入Retry-After首部字段再返回给客户端
------------------------------------

2--》常见服务端口
------------------------------------
FTP             21 ftp文件传输协议
telent          23 telnet服务
POP3            110 pop3邮局协议版本3
SMTP            25 smtp简单邮件传输协议
PCAnyWhere      22 ssh服务
HTTP            80  HTTP 超文本传输协议
HTTPS           443 要是用于HTTPS服务，是提供加密和通过安全端口传输的另一种HTTP
------------------------------------

3--》sql注入原理，解决方法
------------------------------------
使用函数addslashes
addslashes($string):用反斜线引用字符串中的特殊字符' " \
mysql_escape_string($string)：用反斜杠转义字符串中的特殊字符，用于mysql_query()查询。
mysql_real_escape_string($string)：转义SQL语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集，需要保证当前是连接状态才能用该函数，否则会报警告。 不转义%与_

sql注入的原理：就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。
(1)对于动态构造SQL查询的场合，可以使用下面的技术：
第一：替换单引号，即把所有单独出现的单引号改成两个单引号，防止攻击者修改SQL命令的含义。再来看前面的例子，“SELECT * from Users WHERE login = ''' or ''1''=''1' AND password = ''' or ''1''=''1'”显然会得到与“SELECT * from Users WHERE login = '' or '1'='1' AND password = '' or '1'='1'”不同的结果。
第二：删除用户输入内容中的所有连字符，防止攻击者构造出类如“SELECT * from Users WHERE login = 'mas' -- AND password =''”之类的查询，因为这类查询的后半部分已经被注释掉，不再有效，攻击者只要知道一个合法的用户登录名称，根本不需要知道用户的密码就可以顺利获得访问权限。
第三：对于用来执行查询的数据库帐户，限制其权限。用不同的用户帐户执行查询、插入、更新、删除操作。由于隔离了不同帐户可执行的操作，因而也就防止了原本用于执行SELECT命令的地方却被用于执行INSERT、UPDATE或DELETE命令。
⑵ 用存储过程来执行所有的查询。SQL参数的传递方式将防止攻击者利用单引号和连字符实施攻击。此外，它还使得数据库权限可以限制到只允许特定的存储过程执行，所有的用户输入必须遵从被调用的存储过程的安全上下文，这样就很难再发生注入式攻击了。
⑶ 限制表单或查询字符串输入的长度。如果用户的登录名字最多只有10个字符，那么不要认可表单中输入的10个以上的字符，这将大大增加攻击者在SQL命令中插入有害代码的难度。
⑷ 检查用户输入的合法性，确信输入的内容只包含合法的数据。数据检查应当在客户端和服务器端都执行——之所以要执行服务器端验证，是为了弥补客户端验证机制脆弱的安全性。
在客户端，攻击者完全有可能获得网页的源代码，修改验证合法性的脚本（或者直接删除脚本），然后将非法内容通过修改后的表单提交给服务器。因此，要保证验证操作确实已经执行，唯一的办法就是在服务器端也执行验证。你可以使用许多内建的验证对象，例如RegularExpressionValidator，它们能够自动生成验证用的客户端脚本，当然你也可以插入服务器端的方法调用。如果找不到现成的验证对象，你可以通过CustomValidator自己创建一个。
⑸ 将用户登录名称、密码等数据加密保存。加密用户输入的数据，然后再将它与数据库中保存的数据比较，这相当于对用户输入的数据进行了“消毒”处理，用户输入的数据不再对数据库有任何特殊的意义，从而也就防止了攻击者注入SQL命令。System.Web.Security.FormsAuthentication类有一个HashPasswordForStoringInConfigFile，非常适合于对输入数据进行消毒处理。
⑹ 检查提取数据的查询所返回的记录数量。如果程序只要求返回一个记录，但实际返回的记录却超过一行，那就当作出错处理。

其他答案
pdo 使用框架 过滤用户输入的参数 htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。
------------------------------------

4--》CSRF攻击
------------------------------------
浅谈CSRF攻击方式
一.CSRF是什么？
　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。
二.CSRF可以做什么？
　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。
三.CSRF漏洞现状
　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI......而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。
验证HTTP Referer字段
在请求地址中添加token并验证
------------------------------------

5--》其他 --DOS
------------------------------------
全面掌握SQL注入、验证码设置、刷新提交等知识要点，使学员 不光光可以建网站，还可以对网站进行防护DOS攻击、跨端攻击 等，本阶段同时掌握Nginx的配置与安装，是网站开发后性能提升5倍，同时掌握MySQL高级技术。
网站进行防护DOS攻击、跨端攻击 等