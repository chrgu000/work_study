------------------------------------

1--》大流量网站怎么解决访问量的问题
------------------------------------
1.确认当前服务器硬件能否满足-带宽
2.优化mysql数据库--使用缓存
3.防止服务器盗链（）
4.控制大文件下载
5.lvs 分流，负载均衡
6.流量监控软件-》对流量大的页面静态化
7.反向代理服务是装在服务器端，客户端请求资源，如果反向代理服务器里面有缓存就直接返回给客户端--DNS是放在客户端最近的网络中转商--反向代理和DNS都是加快客户端响应的速度





    1.对于大流量的网站,您采用什么样的方法来解决访问量问题

答：首先，确认服务器硬件是否足够支持当前的流量
其次，优化数据库访问。
第三，禁止外部的盗链。
第四，控制大文件的下载。
第五，使用不同主机分流主要流量
第六，使用流量分析统计软件

反向代理服务是装在服务器端，客户端请求资源，如果反向代理服务器里面有缓存就直接返回给客户端

DNS是放在客户端最近的网络中转商

反向代理和DNS都是加快客户端响应的速度

Apache与Nginx的优缺点比较

抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 

最核心的区别在于apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程 

大部分情况下nginx都优于APACHE，比如说静态文件处理、PHP-CGI的支持、反向代理功能、前端Cache、维持连接等等。在Apache+PHP（prefork）模式下，如果PHP处理慢或者前端压力很大的情况下，很容易出现Apache进程数飙升，从而拒绝服务的现象。 

php-cli 命令行模式运行
首先CGI是外部应用程序与Web服务器之间的接口标准，不同类型语言写的程序只要符合cgi标准，就能作为一个cgi程序与web服务器交互，早期的cgi大多都是c或c++。php可以作为一个cgi使用，作为cgi时，它将作为独立的进程运行，有请求过来就创建一个进程进行响应。当php作为apache的一个模块时，php将作为apache的一个子进程存在，接受apache调用。现在也有了php-fpm+nginx的组合，php-fpm是一个fast-cgi管理器，负责将接收到的请求分配给预先生成的php子程序，管理着php进程

linux环境部署 LAMP LNMP（暂时不会-Nginx）--达到要求 -》shell脚本-》定时任务-》  守护进程

    定时任务 分钟级别 执行脚本  crond

    守护进程是保证定时任务不随程序错误而取消执行

    mysql 读写分离，主从服务器 互为主从

    web    分布式缓存 ->session共享-》redis共享（已二进制文件同步）


    1.服务器分布式怎么部署（web集群-分布式缓存是web集群一个小种类）

    2.session共享方法

    3.redis共享

PHP单元测试

我做过p2p，有一个活动，是对于被邀请的新注册的会员首投通过后送5000 积分。如果我手动邀请，注册，验证，投资，等待满标，可能要半天时间。由于是新注册的会员才有，所以我必须用新账号去测试，不能取巧。这一系列操作，是很频繁也很耗时的，我就可以用代码模拟，瞬间出结果。另外，由于是多人开发，别人可能加新功能，改了逻辑影响了我的代码，跑单元测试就能马上知道结果。这就是单元测试的实际应用场景。

为啥需要单元测试？因为业务复杂，对数据敏感，不能容忍数据错误，所以需要单元测试，封装复杂的操作逻辑，保证在接口稳定的前提下，代码的逻辑复合预期。如果你用PHP做的只是一个社区，或者CMS，或者网店，连事务都没用上，那根本谈不上对数据敏感，更别提单元测试了。现实中，对PHP进行单元测试的，几乎没见过

PHP敏捷开发

我们大部分人都学过瀑布开发模型，它是以文档为驱动的。因为在瀑布的整个开发过程中，开发人员根据需求文档进行开发，一切以文档为依据。敏捷开发 (Agile Development)是一种以人为核心、迭代、循序渐进的开发方法，是一种软件开发的流程，它会指导我们用规定的环节去一步一步完成项目的开发；而这 种开发方式的主要驱动核心是人，注重的是人与人之间，面对面的交流；它只写有必要的文档，或尽量少写文档；采用的是迭代式开发。敏捷开发提倡将一个完整的软件版本划分为多个迭代，每个迭代实现不同的特性。重大的、优先级高的特性优先实现，风险高的特性优先实现。在项目的早期 就将软件的原型开发出来，并基于这个原型在后续的迭代不断完善。迭代开发的好处是：尽早编码，尽早暴露项目的技术风险。尽早使客户见到可运行的软件，并提 出优化意见。可以分阶段提早向不同的客户交付可用的版本。

PHP设计模式 http://www.cnblogs.com/siqi/archive/2012/09/09/2667562.html

1.单例模式

单例模式顾名思义，就是只有一个实例。作为对象的创建模式， 单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。

单例模式的要点有三个：

    一是某个类只能有一个实例；

    二是它必须自行创建这个实例；

    三是它必须自行向整个系统提供这个实例。

为什么要使用PHP单例模式

    1. php的应用主要在于数据库应用, 一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时, 如果使用单例模式, 则可以避免大量的new 操作消耗的资源,还可以减少数据库连接这样就不容易出现 too many connections情况。

    2. 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现. 这个可以参看zend Framework的FrontController部分。

    3. 在一次页面请求中, 便于进行调试, 因为所有的代码(例如数据库操作类db)都集中在一个类中, 我们可以在类中设置钩子, 输出日志，从而避免到处var_dump, echo。

2.简单工厂模式

    ①抽象基类：类中定义抽象一些方法，用以在子类中实现

    ②继承自抽象基类的子类：实现基类中的抽象方法

    ③工厂类：用以实例化所有相对应的子类

3.观察者模式

 观察者模式属于行为模式，是定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依 赖于它的对象都得到通知并自动刷新。它完美的将观察者对象和被观察者对象分离。可以在独立的对象（主体）中维护一个对主体感兴趣的依赖项（观察器）列表。 让所有观察器各自实现公共的 Observer 接口，以取消主体和依赖性对象之间的直接依赖关系。（反正我看不明白）

4.策略模式

 在此模式中，算法是从复杂类提取的，因而可以方便地替换。例如，如果要更改搜索引擎中排列页的方法，则策略模式是一个不错的选择。思考一下搜索引擎的几个部分 —— 一部分遍历页面，一部分对每页排列，另一部分基于排列的结果排序。在复杂的示例中，这些部分都在同一个类中。通过使用策略模式，您可将排列部分放入另一个类中，以便更改页排列的方式，而不影响搜索引擎的其余代码。

PHP高并发高负载系统架构

1.硬件  2.linux 3.

Nginx的优势：

高并发连接：官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。

内存消耗少：在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M）。

内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。

策略：相对于老牌的Apache，我们选择Lighttpd和Nginx这些具有更小的资源占用率和更高的负载能力的web服务器。

4.在MySQL配置文件中最值得关注的参数：

l         改变索引缓冲区长度(key_buffer)

l         改变表长(read_buffer_size)

l         设定打开表的数目的最大值(table_cache)

l         对缓长查询设定一个时间限制(long_query_time)

5.dns 反向代理-安装Squid 反向代理服务器，能够大幅度提高服务器效率。

6.php代码，加载模块少-加载尽可能少的模块  查询语句问题


安全问题：sql注入漏洞，xss跨站脚本攻击（输入js语句）
