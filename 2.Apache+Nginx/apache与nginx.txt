
https://blog.csdn.net/watson2016/article/details/77938678/

https://blog.csdn.net/u014801403/article/details/79355716

nginx 配置文件
https://www.cnblogs.com/liang-wei/p/5849771.html

---->>请解释一下什么是Nginx?
Nginx是一个web服务器和方向代理服务器，用于HTTP、HTTPS、SMTP、POP3和IMAP协议。

---->>请列举Nginx的一些特性。
Nginx服务器的特性包括：
反向代理/L7负载均衡器
嵌入式Perl解释器
动态二进制升级
可用于重新编写URL，具有非常好的PCRE支持

---->>正向代理
    一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理
   正向代理总结就一句话：代理端代理的是客户端
---->>反向代理
    反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求，发给内部网络上的服务器
    并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器
    反向代理总结就一句话：代理端代理的是服务端
---->>nginx负载均衡的算法怎么实现的，懵逼，说没看过  。
nginx 的 upstream目前支持 4 种方式的分配 
1)、轮询（默认） 
      每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
2)、weight 
      指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 
2)、ip_hash 
      每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。  
3)、fair（第三方） 
      按后端服务器的响应时间来分配请求，响应时间短的优先分配。  
4)、url_hash（第三方）

nginx内置策略包含加权轮询和ip hash

加权轮询算法分为先深搜索和先广搜索，那么nginx采用的是先深搜索算法，即将首先将请求都分给高权重的机器，直到该机器的权值降到了比其他机器低，才开始将请求分给下一个高权重的机器；
--------------------- 
---->>优点：
        跨平台、配置简单
       非阻塞、高并发连接：处理2-3万并发连接数，官方监测能支持5万并发
        内存消耗小：开启10个nginx才占150M内存，Nginx采取了分阶段资源分配技术
        nginx处理静态文件好,耗费内存少
        内置的健康检查功能：如果有一个服务器宕机，会做一个健康检查，再发送的请求就不会发送到宕机的服务器了。重新将请求提交到其他的节点上。
        节省宽带：支持GZIP压缩，可以添加浏览器本地缓存
        稳定性高：宕机的概率非常小
       master/worker结构：一个master进程，生成一个或者多个worker进程
        接收用户请求是异步的：浏览器将请求发送到nginx服务器，它先将用户请求全部接收下来，再一次性发送给后端web服务器，极大减轻了web服务器的压力
        一边接收web服务器的返回数据，一边发送给浏览器客户端
        网络依赖性比较低，只要ping通就可以负载均衡
        可以有多台nginx服务器
        事件驱动：通信机制采用epoll模型
--------------------- 
---->>为什么Nginx性能这么高？
    得益于它的事件处理机制：
        异步非阻塞事件处理机制：运用了epoll模型，提供了一个队列，排队解决
		
---->>Nginx是如何处理一个请求的呢？
    首先，nginx在启动时，会解析配置文件，得到需要监听的端口与ip地址，然后在nginx的master进程里面
    先初始化好这个监控的socket，再进行listen
    然后再fork出多个子进程出来,  子进程会竞争accept新的连接。
此时，客户端就可以向nginx发起连接了。当客户端与nginx进行三次握手，与nginx建立好一个连接后

    此时，某一个子进程会accept成功，然后创建nginx对连接的封装，即ngx_connection_t结构体
    接着，根据事件调用相应的事件处理模块，如http模块与客户端进行数据的交换。

最后，nginx或客户端来主动关掉连接，到此，一个连接就寿终正寝了
--------------------- 
